class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        
        int ans = 0;
        int m = grid.size();
        int n = grid[0].size();
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == '1'){
                    dfs(i,j,grid);
                    ans++;
                }
            }
        } 
        
        return ans;
    }
    
    void dfs(int currRow, int currCol, vector<vector<char>>& grid){
        
        if(currRow<0 || currRow>=grid.size() || currCol<0 || currCol>=grid[0].size() || grid[currRow][currCol] == '0')
            return;
        
        grid[currRow][currCol] = '0';
            
        dfs(currRow+1,currCol,grid);
        dfs(currRow-1,currCol,grid);
        dfs(currRow,currCol+1,grid);
        dfs(currRow,currCol-1,grid);
        
        return;
    }
};
