class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 || j==0 || i==m-1 || j==n-1){
                    dfs(i,j,grid,m,n);
                }
            }
        }
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 0){
                    dfs(i,j,grid,m,n);
                    ans++;
                }
            }
        }
        
        return ans;
    }
    
    void dfs(int currRow, int currCol, vector<vector<int>>& grid, int m, int n){
        
        if(currRow<0 || currRow>=m || currCol<0 || currCol>=n || grid[currRow][currCol] != 0)
            return;
        
        grid[currRow][currCol] = 1;
        
        dfs(currRow+1,currCol,grid,m,n);
        dfs(currRow-1,currCol,grid,m,n);
        dfs(currRow,currCol+1,grid,m,n);
        dfs(currRow,currCol-1,grid,m,n);
        
        return;
    }
};
