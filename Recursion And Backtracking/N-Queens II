class Solution {
public:
    int totalNQueens(int n) {
        int ans[] = {0};
        vector<vector<char>> board(n, vector<char>(n,'.'));
        getAllPositions(board,0,ans,n);
        return ans[0];
    }
    
    void getAllPositions(vector<vector<char>>& board, int i, int* ans, int n){
        
        if(i == n){
            ans[0]++;
            return;
        }
        
        for(int currCol=0;currCol<n;currCol++){
            if(getRowPosition(board,i,currCol,n)){
                board[i][currCol] = 'Q';
                getAllPositions(board,i+1,ans,n);
                board[i][currCol] = '.';
            }
        }
        
        return;
    }
    
    bool getRowPosition(vector<vector<char>>& board, int i, int j, int n){
        return isRowSafe(board,i,n) && isColSafe(board,j,n) && isDiagonalSafe(board,i,j,n);
    }
    
    bool isRowSafe(vector<vector<char>>& board, int i, int n){
        for(int currCol=0; currCol<n; currCol++){
            if(board[i][currCol] == 'Q')
                return false;
        }
        return true;
    }
    
    bool isColSafe(vector<vector<char>>& board, int j, int n){
        for(int currRow=0; currRow<n; currRow++){
            if(board[currRow][j] == 'Q')
                return false;
        }
        return true;
    }
    
    bool isDiagonalSafe(vector<vector<char>>& board, int i, int j, int n){
        
        int p = i;
        int q = j;
        
        while(p>=0 && q>=0){
           if(board[p][q] == 'Q')
               return false;
           p--;
           q--;
        }
        
        p = i;
        q = j;
        
        while(p>=0 && q<n){
            if(board[p][q] == 'Q')
                return false;
            p--;
            q++;
        }
         
        return true;
    }
};
